import requests
import time
from solana.rpc.api import Client
from solders.pubkey import Pubkey
from solders.signature import Signature
from decimal import Decimal

# Configuración
SOLANA_RPC_URL = "https://api.mainnet-beta.solana.com"
WHALE_WALLET = "MfDuWeqSHEqTFVYZ7LoexgAK9dxk7cy4DFJWjWMGVWa"
YOUR_WALLET = "2kWSgLGnSPLfuVXrCoikkteYbPL41bfdppdkViitaQ2K"
PROPORTION = 0.1  # Ajusta según el porcentaje de inversión

solana_client = Client(SOLANA_RPC_URL)

def get_latest_transactions(wallet_address):
    response = solana_client.get_signatures_for_address(Pubkey.from_string(wallet_address), limit=5)
    if not response or "result" not in response:
        return []
    return response["result"]

def get_transaction_details(signature):
    response = solana_client.get_transaction(Signature.from_string(signature), "json")
    if not response or "result" not in response:
        return None
    return response["result"]

def monitor_wallet():
    seen_transactions = set()
    while True:
        transactions = get_latest_transactions(WHALE_WALLET)
        for tx in transactions:
            if tx["signature"] not in seen_transactions:
                seen_transactions.add(tx["signature"])
                tx_details = get_transaction_details(tx["signature"])
                if tx_details:
                    process_transaction(tx_details)
        time.sleep(10)

def process_transaction(tx_details):
    print("Nueva transacción detectada:", tx_details)
    # Analizar la transacción para determinar qué token se compró/vendió y cuánto
    instructions = tx_details.get("transaction", {}).get("message", {}).get("instructions", [])
    for instr in instructions:
        if "parsed" in instr:
            info = instr["parsed"].get("info", {})
            if "source" in info and "destination" in info:
                source = info["source"]
                destination = info["destination"]
                amount = Decimal(info.get("amount", 0))
                print(f"Transferencia detectada: {amount} SOL de {source} a {destination}")
                if source == WHALE_WALLET:
                    execute_trade(amount)

def execute_trade(amount):
    proportional_amount = amount * PROPORTION
    print(f"Ejecutando compra/venta por {proportional_amount} SOL en {YOUR_WALLET}")
    # Aquí se integraría con un exchange o smart contract para replicar la operación

if __name__ == "__main__":
    print("Iniciando monitoreo de la billetera...")
    monitor_wallet()
